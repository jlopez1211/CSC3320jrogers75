CAT(1)                          User Commands                          CAT(1)



NAME
       cat - concatenate files and print on the standard output

SYNOPSIS
       cat [OPTION]... [FILE]...

DESCRIPTION
       Concatenate FILE(s), or standard input, to standard output.

       -A, --show-all
              equivalent to -vET

       -b, --number-nonblank
              number nonempty output lines, overrides -n

       -e     equivalent to -vE

       -E, --show-ends
              display $ at end of each line

       -n, --number
              number all output lines

       -s, --squeeze-blank
              suppress repeated empty output lines

       -t     equivalent to -vT

       -T, --show-tabs
              display TAB characters as ^I

       -u     (ignored)

       -v, --show-nonprinting
              use ^ and M- notation, except for LFD and TAB

       --help display this help and exit

       --version
              output version information and exit

       With no FILE, or when FILE is -, read standard input.

EXAMPLES
       cat f - g
              Output f's contents, then standard input, then g's contents.

       cat    Copy standard input to standard output.

       GNU  coreutils  online  help: <http://www.gnu.org/software/coreutils/>
       Report cat translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Torbjorn Granlund and Richard M. Stallman.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.  License  GPLv3+:  GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       tac(1)

       The full documentation for cat is maintained as a Texinfo manual.   If
       the  info  and  cat  programs are properly installed at your site, the
       command

              info coreutils 'cat invocation'

       should give you access to the complete manual.



GNU coreutils 8.22              November 2020                          CAT(1)
LS(1)                           User Commands                           LS(1)



NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List  information  about the FILEs (the current directory by default).
       Sort entries alphabetically if none of -cftuvSUX nor --sort is  speci‐
       fied.

       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              scale   sizes   by   SIZE   before   printing    them;    e.g.,
              '--block-size=M'  prints sizes in units of 1,048,576 bytes; see
              SIZE format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with -lt: sort by, and show, ctime (time of  last  modification
              of  file  status  information); with -l: show ctime and sort by
              name; otherwise: sort by ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              colorize the output; WHEN can be 'never', 'auto',  or  'always'
              (the default); more info below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode

       -f     do not sort, enable -aU, disable -ls --color

       -F, --classify
              append indicator (one of */=>@|) to entries

       --file-type
              likewise, except do not append '*'

       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column -1,
              verbose -l, vertical -C

       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       --group-directories-first
              group directories before files;

              can  be  augmented  with  a  --sort  option,  but  any  use  of
              --sort=none (-U) disables grouping

       -G, --no-group
              in a long listing, don't print group names

       -h, --human-readable
              with  -l,  print  sizes in human readable format (e.g., 1K 234M
              2G)

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
              follow each command line symbolic link

              that points to a directory

       --hide=PATTERN
              do not list implied entries matching shell PATTERN  (overridden
              by -a or -A)

       --indicator-style=WORD
              append   indicator   with  style  WORD  to  entry  names:  none
              (default), slash (-p), file-type (--file-type), classify (-F)

       -i, --inode
              print the index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k, --kibibytes
              default to 1024-byte blocks for disk usage

       -l     use a long listing format

       -L, --dereference
              when showing file information for a symbolic link, show  infor‐
              mation  for  the  file  the link references rather than for the
              link itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs

       -N, --literal
              print raw entry names (don't treat e.g. control characters spe‐
              cially)

       -o     like -l, but do not list group information

       -p, --indicator-style=slash
              append / indicator to directories

       -q, --hide-control-chars
              print ? instead of nongraphic characters

       --show-control-chars
              show  nongraphic  characters as-is (the default, unless program
              is 'ls' and output is a terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
              use quoting style WORD for entry names: literal, locale, shell,
              shell-always, c, escape

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print the allocated size of each file, in blocks

       -S     sort by file size

       --sort=WORD
              sort  by WORD instead of name: none (-U), size (-S), time (-t),
              version (-v), extension (-X)

       --time=WORD
              with -l, show time as  WORD  instead  of  default  modification
              time:  atime  or  access or use (-u) ctime or status (-c); also
              use specified time as sort key if --sort=time

       --time-style=STYLE
              with -l, show times using style STYLE: full-iso, long-iso, iso,
              locale,  or  +FORMAT;  FORMAT is interpreted like in 'date'; if
              FORMAT is  FORMAT1<newline>FORMAT2,  then  FORMAT1  applies  to
              non-recent  files and FORMAT2 to recent files; if STYLE is pre‐
              fixed with 'posix-', STYLE takes effect only outside the  POSIX
              locale

       -t     sort by modification time, newest first

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with  -lt: sort by, and show, access time; with -l: show access
              time and sort by name; otherwise: sort by access time

       -U     do not sort; list entries in directory order

       -v     natural sort of (version) numbers within text

       -w, --width=COLS
              assume screen width instead of current value

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -1     list one file per line

       SELinux options:

       --lcontext
              Display security context.   Enable -l. Lines will  probably  be
              too wide for most displays.

       -Z, --context
              Display security context so it fits on most displays.  Displays
              only mode, user, group, security context and file name.

       --scontext
              Display only security context and file name.

       --help display this help and exit

       --version
              output version information and exit

       SIZE is an integer and optional unit (example: 10M  is  10*1024*1024).
       Units are K, M, G, T, P, E, Z, Y (powers of 1024) or KB, MB, ... (pow‐
       ers of 1000).

       Using color to distinguish file types is disabled both by default  and
       with --color=never.  With --color=auto, ls emits color codes only when
       standard output is connected to a terminal.  The LS_COLORS environment
       variable  can  change  the settings.  Use the dircolors command to set
       it.

   Exit status:
       0      if OK,

       1      if minor problems (e.g., cannot access subdirectory),

       2      if serious trouble (e.g., cannot access command-line argument).

       GNU coreutils  online  help:  <http://www.gnu.org/software/coreutils/>
       Report ls translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

COPYRIGHT
       Copyright  ©  2013 Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       The  full  documentation for ls is maintained as a Texinfo manual.  If
       the info and ls programs are properly installed at your site, the com‐
       mand

              info coreutils 'ls invocation'

       should give you access to the complete manual.



GNU coreutils 8.22              November 2020                           LS(1)
SORT(1)                         User Commands                         SORT(1)



NAME
       sort - sort lines of text files

SYNOPSIS
       sort [OPTION]... [FILE]...
       sort [OPTION]... --files0-from=F

DESCRIPTION
       Write sorted concatenation of all FILE(s) to standard output.

       Mandatory  arguments  to  long options are mandatory for short options
       too.  Ordering options:

       -b, --ignore-leading-blanks
              ignore leading blanks

       -d, --dictionary-order
              consider only blanks and alphanumeric characters

       -f, --ignore-case
              fold lower case to upper case characters

       -g, --general-numeric-sort
              compare according to general numerical value

       -i, --ignore-nonprinting
              consider only printable characters

       -M, --month-sort
              compare (unknown) < 'JAN' < ... < 'DEC'

       -h, --human-numeric-sort
              compare human readable numbers (e.g., 2K 1G)

       -n, --numeric-sort
              compare according to string numerical value

       -R, --random-sort
              sort by random hash of keys

       --random-source=FILE
              get random bytes from FILE

       -r, --reverse
              reverse the result of comparisons

       --sort=WORD
              sort according to WORD: general-numeric -g,  human-numeric  -h,
              month -M, numeric -n, random -R, version -V

       -V, --version-sort
              natural sort of (version) numbers within text

       Other options:

       --batch-size=NMERGE
              merge at most NMERGE inputs at once; for more use temp files

       -c, --check, --check=diagnose-first
              check for sorted input; do not sort

       -C, --check=quiet, --check=silent
              like -c, but do not report first bad line

       --compress-program=PROG
              compress temporaries with PROG; decompress them with PROG -d

       --debug
              annotate  the  part  of  the  line used to sort, and warn about
              questionable usage to stderr

       --files0-from=F
              read input from the files specified by NUL-terminated names  in
              file F; If F is - then read names from standard input

       -k, --key=KEYDEF
              sort via a key; KEYDEF gives location and type

       -m, --merge
              merge already sorted files; do not sort

       -o, --output=FILE
              write result to FILE instead of standard output

       -s, --stable
              stabilize sort by disabling last-resort comparison

       -S, --buffer-size=SIZE
              use SIZE for main memory buffer

       -t, --field-separator=SEP
              use SEP instead of non-blank to blank transition

       -T, --temporary-directory=DIR
              use  DIR for temporaries, not $TMPDIR or /tmp; multiple options
              specify multiple directories

       --parallel=N
              change the number of sorts run concurrently to N

       -u, --unique
              with -c, check for strict ordering; without -c, output only the
              first of an equal run

       -z, --zero-terminated
              end lines with 0 byte, not newline

       --help display this help and exit

       --version
              output version information and exit

       KEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where
       F is a field number and C a character position in the field; both  are
       origin  1,  and the stop position defaults to the line's end.  If nei‐
       ther -t nor -b is in effect, characters in a field  are  counted  from
       the  beginning  of the preceding whitespace.  OPTS is one or more sin‐
       gle-letter  ordering  options  [bdfgiMhnRrV],  which  override  global
       ordering  options  for  that  key.  If no key is given, use the entire
       line as the key.

       SIZE may be followed by the following multiplicative suffixes: % 1% of
       memory, b 1, K 1024 (default), and so on for M, G, T, P, E, Z, Y.

       With no FILE, or when FILE is -, read standard input.

       ***  WARNING  *** The locale specified by the environment affects sort
       order.  Set LC_ALL=C to get  the  traditional  sort  order  that  uses
       native byte values.

       GNU  coreutils  online  help: <http://www.gnu.org/software/coreutils/>
       Report sort translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Mike Haertel and Paul Eggert.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.  License  GPLv3+:  GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       uniq(1)

       The full documentation for sort is maintained as a Texinfo manual.  If
       the  info  and  sort programs are properly installed at your site, the
       command

              info coreutils 'sort invocation'

       should give you access to the complete manual.



GNU coreutils 8.22              November 2020                         SORT(1)
MKDIR(1)                        User Commands                        MKDIR(1)



NAME
       mkdir - make directories

SYNOPSIS
       mkdir [OPTION]... DIRECTORY...

DESCRIPTION
       Create the DIRECTORY(ies), if they do not already exist.

       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -m, --mode=MODE
              set file mode (as in chmod), not a=rwx - umask

       -p, --parents
              no error if existing, make parent directories as needed

       -v, --verbose
              print a message for each created directory

       -Z     set SELinux security context of each created directory  to  the
              default type

       --context[=CTX]
              like  -Z,  or if CTX is specified then set the SELinux or SMACK
              security context to CTX

       --help display this help and exit

       --version
              output version information and exit

       GNU coreutils  online  help:  <http://www.gnu.org/software/coreutils/>
       Report mkdir translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by David MacKenzie.

COPYRIGHT
       Copyright  ©  2013 Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       mkdir(2)

       The  full  documentation  for mkdir is maintained as a Texinfo manual.
       If the info and mkdir programs are properly installed  at  your  site,
       the command

              info coreutils 'mkdir invocation'

       should give you access to the complete manual.



GNU coreutils 8.22              November 2020                        MKDIR(1)
SED(1)                          User Commands                          SED(1)



NAME
       sed - stream editor for filtering and transforming text

SYNOPSIS
       sed [OPTION]... {script-only-if-no-other-script} [input-file]...

DESCRIPTION
       Sed is a stream editor.  A stream editor is used to perform basic text
       transformations on an input stream (a file or input from a  pipeline).
       While  in  some ways similar to an editor which permits scripted edits
       (such as ed), sed works by making only one pass over the input(s), and
       is  consequently  more  efficient.   But it is sed's ability to filter
       text in a pipeline which  particularly  distinguishes  it  from  other
       types of editors.

       -n, --quiet, --silent

              suppress automatic printing of pattern space

       -e script, --expression=script

              add the script to the commands to be executed

       -f script-file, --file=script-file

              add the contents of script-file to the commands to be executed

       --follow-symlinks

              follow symlinks when processing in place

       -i[SUFFIX], --in-place[=SUFFIX]

              edit files in place (makes backup if SUFFIX supplied)

       -c, --copy

              use copy instead of rename when shuffling files in -i mode

       -b, --binary

              does  nothing;  for compatibility with WIN32/CYGWIN/MSDOS/EMX (
              open files in binary mode (CR+LFs are not treated specially))

       -l N, --line-length=N

              specify the desired line-wrap length for the `l' command

       --posix

              disable all GNU extensions.

       -r, --regexp-extended

              use extended regular expressions in the script.

       -s, --separate

              consider files as separate rather than as a  single  continuous
              long stream.

       -u, --unbuffered

              load minimal amounts of data from the input files and flush the
              output buffers more often

       -z, --null-data

              separate lines by NUL characters

       --help

              display this help and exit

       --version

              output version information and exit

       If no -e, --expression, -f, or --file option is given, then the  first
       non-option  argument  is  taken  as  the sed script to interpret.  All
       remaining arguments are names of input files; if no  input  files  are
       specified, then the standard input is read.

       GNU  sed  home page: <http://www.gnu.org/software/sed/>.  General help
       using GNU software: <http://www.gnu.org/gethelp/>.  E-mail bug reports
       to:  <bug-sed@gnu.org>.  Be sure to include the word ``sed'' somewhere
       in the ``Subject:'' field.

COMMAND SYNOPSIS
       This is just a brief synopsis of sed commands to serve as  a  reminder
       to  those  who already know sed; other documentation (such as the tex‐
       info document) must be consulted for fuller descriptions.

   Zero-address ``commands''
       : label
              Label for b and t commands.

       #comment
              The comment extends until the next newline (or the end of a  -e
              script fragment).

       }      The closing bracket of a { } block.

   Zero- or One- address commands
       =      Print the current line number.

       a \

       text   Append  text,  which  has  each  embedded newline preceded by a
              backslash.

       i \

       text   Insert text, which has each  embedded  newline  preceded  by  a
              backslash.

       q [exit-code]
              Immediately  quit  the  sed  script without processing any more
              input, except that if auto-print is not  disabled  the  current
              pattern space will be printed.  The exit code argument is a GNU
              extension.

       Q [exit-code]
              Immediately quit the sed script  without  processing  any  more
              input.  This is a GNU extension.

       r filename
              Append text read from filename.

       R filename
              Append  a line read from filename.  Each invocation of the com‐
              mand reads a line from the file.  This is a GNU extension.

   Commands which accept address ranges
       {      Begin a block of commands (end with a }).

       b label
              Branch to label; if label is omitted, branch to end of script.

       c \

       text   Replace the selected lines with text, which has  each  embedded
              newline preceded by a backslash.

       d      Delete pattern space.  Start next cycle.

       D      If  pattern space contains no newline, start a normal new cycle
              as if the d command was issued.  Otherwise, delete text in  the
              pattern  space  up to the first newline, and restart cycle with
              the resultant pattern space, without  reading  a  new  line  of
              input.

       h H    Copy/append pattern space to hold space.

       g G    Copy/append hold space to pattern space.

       l      List out the current line in a ``visually unambiguous'' form.

       l width
              List  out  the current line in a ``visually unambiguous'' form,
              breaking it at width characters.  This is a GNU extension.

       n N    Read/append the next line of input into the pattern space.

       p      Print the current pattern space.

       P      Print up to the first embedded newline of the  current  pattern
              space.

       s/regexp/replacement/
              Attempt to match regexp against the pattern space.  If success‐
              ful,  replace  that  portion  matched  with  replacement.   The
              replacement  may  contain  the  special character & to refer to
              that portion of the pattern space which matched, and  the  spe‐
              cial escapes \1 through \9 to refer to the corresponding match‐
              ing sub-expressions in the regexp.

       t label
              If a s/// has done a successful  substitution  since  the  last
              input  line  was  read  and since the last t or T command, then
              branch to label; if label is omitted, branch to end of script.

       T label
              If no s/// has done a successful substitution  since  the  last
              input  line  was  read  and since the last t or T command, then
              branch to label; if label is omitted, branch to end of  script.
              This is a GNU extension.

       w filename
              Write the current pattern space to filename.

       W filename
              Write  the first line of the current pattern space to filename.
              This is a GNU extension.

       x      Exchange the contents of the hold and pattern spaces.

       y/source/dest/
              Transliterate the characters in the pattern space which  appear
              in source to the corresponding character in dest.

Addresses
       Sed commands can be given with no addresses, in which case the command
       will be executed for all input lines; with one address, in which  case
       the  command  will  only  be executed for input lines which match that
       address; or with two addresses, in which case the command will be exe‐
       cuted  for  all  input  lines which match the inclusive range of lines
       starting from the first address and continuing to the second  address.
       Three  things  to note about address ranges: the syntax is addr1,addr2
       (i.e., the addresses are separated by a comma); the line  which  addr1
       matched  will  always  be  accepted,  even if addr2 selects an earlier
       line; and if addr2 is a regexp, it will not be tested against the line
       that addr1 matched.

       After the address (or address-range), and before the command, a !  may
       be inserted, which specifies that the command shall only  be  executed
       if the address (or address-range) does not match.

       The following address types are supported:

       number Match  only the specified line number (which increments cumula‐
              tively across files, unless the -s option is specified  on  the
              command line).

       first~step
              Match  every  step'th line starting with line first.  For exam‐
              ple, ``sed -n 1~2p'' will print all the odd-numbered  lines  in
              the  input  stream,  and the address 2~5 will match every fifth
              line, starting with the second.  first can  be  zero;  in  this
              case,  sed  operates  as if it were equal to step.  (This is an
              extension.)

       $      Match the last line.

       /regexp/
              Match lines matching the regular expression regexp.

       \cregexpc
              Match lines matching the regular expression regexp.  The c  may
              be any character.

       GNU sed also supports some special 2-address forms:

       0,addr2
              Start  out  in  "matched  first  address" state, until addr2 is
              found.  This is  similar  to  1,addr2,  except  that  if  addr2
              matches  the  very first line of input the 0,addr2 form will be
              at the end of its range, whereas the 1,addr2 form will still be
              at the beginning of its range.  This works only when addr2 is a
              regular expression.

       addr1,+N
              Will match addr1 and the N lines following addr1.

       addr1,~N
              Will match addr1 and the lines following addr1 until  the  next
              line whose input line number is a multiple of N.

REGULAR EXPRESSIONS
       POSIX.2  BREs  should be supported, but they aren't completely because
       of performance problems.  The \n  sequence  in  a  regular  expression
       matches  the  newline  character,  and similarly for \a, \t, and other
       sequences.

BUGS
       E-mail bug reports to bug-sed@gnu.org.  Also, please include the  out‐
       put  of  ``sed --version'' in the body of your report if at all possi‐
       ble.

AUTHOR
       Written by Jay Fenlason, Tom Lord, Ken  Pizzini,  and  Paolo  Bonzini.
       GNU  sed  home page: <http://www.gnu.org/software/sed/>.  General help
       using GNU software: <http://www.gnu.org/gethelp/>.  E-mail bug reports
       to:  <bug-sed@gnu.org>.  Be sure to include the word ``sed'' somewhere
       in the ``Subject:'' field.

COPYRIGHT
       Copyright © 2012 Free Software Foundation, Inc.  License  GPLv3+:  GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       awk(1), ed(1), grep(1), tr(1), perlre(1),  sed.info,  any  of  various
       books on sed, the sed FAQ (http://sed.sf.net/grabbag/tutorials/sed‐
       faq.txt), http://sed.sf.net/grabbag/.

       The full documentation for sed is maintained as a Texinfo manual.  If
       the info and sed programs are properly installed at your site, the
       command

              info sed

       should give you access to the complete manual.



sed 4.2.2                       September 2020                         SED(1)
ECHO(1)                         User Commands                         ECHO(1)



NAME
       echo - display a line of text

SYNOPSIS
       echo [SHORT-OPTION]... [STRING]...
       echo LONG-OPTION

DESCRIPTION
       Echo the STRING(s) to standard output.

       -n     do not output the trailing newline

       -e     enable interpretation of backslash escapes

       -E     disable interpretation of backslash escapes (default)

       --help display this help and exit

       --version
              output version information and exit

       If -e is in effect, the following sequences are recognized:

       \\     backslash

       \a     alert (BEL)

       \b     backspace

       \c     produce no further output

       \e     escape

       \f     form feed

       \n     new line

       \r     carriage return

       \t     horizontal tab

       \v     vertical tab

       \0NNN  byte with octal value NNN (1 to 3 digits)

       \xHH   byte with hexadecimal value HH (1 to 2 digits)

       NOTE:  your  shell  may  have  its  own version of echo, which usually
       supersedes the version described here.  Please refer to  your  shell's
       documentation for details about the options it supports.

       GNU  coreutils  online  help: <http://www.gnu.org/software/coreutils/>
       Report echo translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Brian Fox and Chet Ramey.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.  License  GPLv3+:  GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       The full documentation for echo is maintained as a Texinfo manual.  If
       the  info  and  echo programs are properly installed at your site, the
       command

              info coreutils 'echo invocation'

       should give you access to the complete manual.



GNU coreutils 8.22              November 2020                         ECHO(1)
clear(1)                   General Commands Manual                   clear(1)



NAME
       clear - clear the terminal screen

SYNOPSIS
       clear

DESCRIPTION
       clear  clears  your screen if this is possible.  It looks in the envi‐
       ronment for the terminal type and then in  the  terminfo  database  to
       figure  out  how  to  clear the screen.  Some terminals can clear also
       their scrollback buffer to prevent  access  to  potentially  sensitive
       data.   If  the terminfo entry for the terminal type contains extended
       capability E3, clear will use it to clear the scrollback buffer.

       clear ignores any command-line parameters that may be present.

SEE ALSO
       tput(1), terminfo(5)

       This describes ncurses version 5.9 (patch 20130511).



                                                                     clear(1)
VIM(1)                     General Commands Manual                     VIM(1)



NAME
       vim - Vi IMproved, a programmers text editor

SYNOPSIS
       vim [options] [file ..]
       vim [options] -
       vim [options] -t tag
       vim [options] -q [errorfile]

       ex gex
       view
       gvim gview vimx evim eview
       rvim rview rgvim rgview

DESCRIPTION
       Vim is a text editor that is upwards compatible to Vi.  It can be used
       to edit all kinds of plain text.  It is especially useful for  editing
       programs.

       There are a lot of enhancements above Vi: multi level undo, multi win‐
       dows and buffers, syntax highlighting, command line editing,  filename
       completion,   on-line   help,  visual  selection,  etc..   See  ":help
       vi_diff.txt" for a summary of the differences between Vim and Vi.

       While running Vim a lot of help can be obtained from the on-line  help
       system, with the ":help" command.  See the ON-LINE HELP section below.

       Most often Vim is started to edit a single file with the command

            vim file

       More generally Vim is started with:

            vim [options] [filelist]

       If  the  filelist is missing, the editor will start with an empty buf‐
       fer.  Otherwise exactly one out of the following four may be  used  to
       choose one or more files to be edited.

       file ..     A  list  of  filenames.  The first one will be the current
                   file and read into the buffer.  The cursor will  be  posi‐
                   tioned  on  the  first line of the buffer.  You can get to
                   the other files with the ":next" command.  To edit a  file
                   that starts with a dash, precede the filelist with "--".

       -           The  file  to  edit is read from stdin.  Commands are read
                   from stderr, which should be a TTY.

       -t {tag}    The file to edit and the initial cursor  position  depends
                   on  a  "tag", a sort of goto label.  {tag} is looked up in
                   the tags file, the associated  file  becomes  the  current
                   file  and the associated command is executed.  Mostly this
                   is used for C programs, in which case  {tag}  could  be  a
                   function  name.   The  effect  is that the file containing
                   that function becomes the current file and the  cursor  is
                   positioned  on  the  start  of  the  function.  See ":help
                   tag-commands".

       -q [errorfile]
                   Start in quickFix mode.  The file [errorfile] is read  and
                   the  first error is displayed.  If [errorfile] is omitted,
                   the filename  is  obtained  from  the  'errorfile'  option
                   (defaults  to  "AztecC.Err" for the Amiga, "errors.err" on
                   other systems).  Further errors can be jumped to with  the
                   ":cn" command.  See ":help quickfix".

       Vim  behaves  differently,  depending  on the name of the command (the
       executable may still be the same file).

       vim       The "normal" way, everything is default.

       ex        Start in Ex mode.  Go to Normal mode with the ":vi" command.
                 Can also be done with the "-e" argument.

       view      Start in read-only mode.  You will be protected from writing
                 the files.  Can also be done with the "-R" argument.

       gvim gview
                 The GUI version.  Starts a new window.

       gex       Starts a new gvim window in Ex mode. Can also be  done  with
                 the "-e" argument to gvim

       vimx      Starts  gvim  in  "Vi" mode similar to "vim", but with addi‐
                 tional features like xterm clipboard support

       evim eview
                 The GUI version in easy mode.  Starts  a  new  window.   Can
                 also be done with the "-y" argument.

       rvim rview rgvim rgview
                 Like  the above, but with restrictions.  It will not be pos‐
                 sible to start shell commands, or suspend Vim.  Can also  be
                 done with the "-Z" argument.

OPTIONS
       The  options  may  be  given  in any order, before or after filenames.
       Options without an argument can be combined after a single dash.

       +[num]      For the first file the cursor will be positioned  on  line
                   "num".  If "num" is missing, the cursor will be positioned
                   on the last line.

       +/{pat}     For the first file the cursor will be  positioned  on  the
                   first occurrence of {pat}.  See ":help search-pattern" for
                   the available search patterns.

       +{command}

       -c {command}
                   {command} will be executed after the first file  has  been
                   read.   {command} is interpreted as an Ex command.  If the
                   {command} contains spaces it must be  enclosed  in  double
                   quotes (this depends on the shell that is used).  Example:
                   Vim "+set si" main.c
                   Note: You can use up to 10 "+" or "-c" commands.

       -S {file}   {file} will be sourced after the first file has been read.
                   This  is  equivalent to -c "source {file}".  {file} cannot
                   start with '-'.  If {file}  is  omitted  "Session.vim"  is
                   used (only works when -S is the last argument).

       --cmd {command}
                   Like  using  "-c", but the command is executed just before
                   processing any vimrc file.  You can use up to 10 of  these
                   commands, independently from "-c" commands.

       -A          If  Vim  has been compiled with ARABIC support for editing
                   right-to-left oriented files and Arabic keyboard  mapping,
                   this  option  starts  Vim in Arabic mode, i.e. 'arabic' is
                   set.  Otherwise an error message is given and Vim aborts.

       -b          Binary mode.  A few options will be set that makes it pos‐
                   sible to edit a binary or executable file.

       -C          Compatible.   Set the 'compatible' option.  This will make
                   Vim behave mostly like  Vi,  even  though  a  .vimrc  file
                   exists.

       -d          Start  in  diff  mode.  There should be two, three or four
                   file name arguments.  Vim will open all the files and show
                   differences between them.  Works like vimdiff(1).

       -d {device} Open  {device}  for use as a terminal.  Only on the Amiga.
                   Example: "-d con:20/30/600/150".

       -D          Debugging.  Go to debugging mode when executing the  first
                   command from a script.

       -e          Start  Vim in Ex mode, just like the executable was called
                   "ex".

       -E          Start Vim in improved Ex mode, just  like  the  executable
                   was called "exim".

       -f          Foreground.   For  the  GUI version, Vim will not fork and
                   detach from the shell it was started in.   On  the  Amiga,
                   Vim  is  not  restarted to open a new window.  This option
                   should be used when Vim is executed by a program that will
                   wait  for  the edit session to finish (e.g. mail).  On the
                   Amiga the ":sh" and ":!" commands will not work.

       --nofork    Foreground.  For the GUI version, Vim will  not  fork  and
                   detach from the shell it was started in.

       -F          If  Vim  has  been compiled with FKMAP support for editing
                   right-to-left oriented files and Farsi  keyboard  mapping,
                   this  option  starts  Vim  in Farsi mode, i.e. 'fkmap' and
                   'rightleft' are set.  Otherwise an error message is  given
                   and Vim aborts.

       -g          If  Vim  has  been  compiled with GUI support, this option
                   enables the GUI.  If no GUI support was  compiled  in,  an
                   error message is given and Vim aborts.

       -h          Give  a  bit  of help about the command line arguments and
                   options.  After this Vim exits.

       -H          If Vim has been compiled with RIGHTLEFT support for  edit‐
                   ing  right-to-left oriented files and Hebrew keyboard map‐
                   ping, this option starts Vim in Hebrew mode, i.e.  'hkmap'
                   and  'rightleft'  are  set.  Otherwise an error message is
                   given and Vim aborts.

       -i {viminfo}
                   When using the viminfo file is enabled, this  option  sets
                   the  filename to use, instead of the default "~/.viminfo".
                   This can also be used to skip  the  use  of  the  .viminfo
                   file, by giving the name "NONE".

       -L          Same as -r.

       -l          Lisp mode.  Sets the 'lisp' and 'showmatch' options on.

       -m          Modifying  files  is disabled.  Resets the 'write' option.
                   You can still modify the buffer, but writing a file is not
                   possible.

       -M          Modifications  not  allowed.  The 'modifiable' and 'write'
                   options will be unset, so that changes are not allowed and
                   files  can not be written.  Note that these options can be
                   set to enable making modifications.

       -N          No-compatible mode.  Reset the 'compatible' option.   This
                   will make Vim behave a bit better, but less Vi compatible,
                   even though a .vimrc file does not exist.

       -n          No swap file will be used.  Recovery after a crash will be
                   impossible.   Handy  if  you want to edit a file on a very
                   slow medium (e.g. floppy).  Can also be  done  with  ":set
                   uc=0".  Can be undone with ":set uc=200".

       -nb         Become  an  editor  server for NetBeans.  See the docs for
                   details.

       -o[N]       Open N windows stacked.  When N is omitted, open one  win‐
                   dow for each file.

       -O[N]       Open  N windows side by side.  When N is omitted, open one
                   window for each file.

       -p[N]       Open N tab pages.  When N is omitted, open  one  tab  page
                   for each file.

       -R          Read-only  mode.   The 'readonly' option will be set.  You
                   can still edit the buffer,  but  will  be  prevented  from
                   accidentally  overwriting a file.  If you do want to over‐
                   write a file, add an exclamation mark to the  Ex  command,
                   as  in  ":w!".   The  -R option also implies the -n option
                   (see below).  The 'readonly'  option  can  be  reset  with
                   ":set noro".  See ":help 'readonly'".

       -r          List  swap  files,  with  information about using them for
                   recovery.

       -r {file}   Recovery mode.  The swap file is used to recover a crashed
                   editing  session.   The  swap file is a file with the same
                   filename as the  text  file  with  ".swp"  appended.   See
                   ":help recovery".

       -s          Silent  mode.   Only when started as "Ex" or when the "-e"
                   option was given before the "-s" option.

       -s {scriptin}
                   The script file {scriptin} is read.  The characters in the
                   file  are  interpreted as if you had typed them.  The same
                   can be done with the command  ":source!  {scriptin}".   If
                   the  end  of  the file is reached before the editor exits,
                   further characters are read from the keyboard.

       -T {terminal}
                   Tells Vim the name of the terminal you  are  using.   Only
                   required when the automatic way doesn't work.  Should be a
                   terminal known to Vim (builtin) or defined in the  termcap
                   or terminfo file.

       -u {vimrc}  Use  the commands in the file {vimrc} for initializations.
                   All the other initializations are skipped.   Use  this  to
                   edit a special kind of files.  It can also be used to skip
                   all initializations by giving the name "NONE".  See ":help
                   initialization" within vim for more details.

       -U {gvimrc} Use  the commands in the file {gvimrc} for GUI initializa‐
                   tions.  All the other GUI initializations are skipped.  It
                   can also be used to skip all GUI initializations by giving
                   the name "NONE".  See ":help gui-init" within vim for more
                   details.

       -V[N]       Verbose.   Give messages about which files are sourced and
                   for reading and writing a viminfo file.  The optional num‐
                   ber N is the value for 'verbose'.  Default is 10.

       -v          Start  Vim in Vi mode, just like the executable was called
                   "vi".  This only has effect when the executable is  called
                   "ex".

       -w {scriptout}
                   All  the characters that you type are recorded in the file
                   {scriptout}, until you exit Vim.  This is  useful  if  you
                   want  to  create a script file to be used with "vim -s" or
                   ":source!".  If the {scriptout}  file  exists,  characters
                   are appended.

       -W {scriptout}
                   Like -w, but an existing file is overwritten.

       -x          Use  encryption  when  writing  files.   Will prompt for a
                   crypt key.

       -X          Don't connect to the X server.  Shortens startup time in a
                   terminal,  but  the window title and clipboard will not be
                   used.

       -y          Start Vim in easy  mode,  just  like  the  executable  was
                   called  "evim" or "eview".  Makes Vim behave like a click-
                   and-type editor.

       -Z          Restricted mode.  Works like the  executable  starts  with
                   "r".

       --          Denotes the end of the options.  Arguments after this will
                   be handled as a file name.  This can be  used  to  edit  a
                   filename that starts with a '-'.

       --echo-wid  GTK GUI only: Echo the Window ID on stdout.

       --help      Give a help message and exit, just like "-h".

       --literal   Take  file  name  arguments literally, do not expand wild‐
                   cards.  This has no effect on Unix where the shell expands
                   wildcards.

       --noplugin  Skip loading plugins.  Implied by -u NONE.

       --remote    Connect  to  a Vim server and make it edit the files given
                   in the rest of the arguments.  If no  server  is  found  a
                   warning  is  given and the files are edited in the current
                   Vim.

       --remote-expr {expr}
                   Connect to a Vim server, evaluate {expr} in it  and  print
                   the result on stdout.

       --remote-send {keys}
                   Connect to a Vim server and send {keys} to it.

       --remote-silent
                   As  --remote,  but  without  the warning when no server is
                   found.

       --remote-wait
                   As --remote, but Vim does not exit until  the  files  have
                   been edited.

       --remote-wait-silent
                   As  --remote-wait,  but without the warning when no server
                   is found.

       --remote-tab[-wait][-silent]
                   As --remote but use tab page per file

       --role      Set a unique role to identify the main window

       --serverlist
                   List the names of all Vim servers that can be found.

       --servername {name}
                   Use {name} as the server name.  Used for the current  Vim,
                   unless  used  with a --remote argument, then it's the name
                   of the server to connect to.

       --socketid {id}
                   GTK GUI only: Use the GtkPlug mechanism  to  run  gvim  in
                   another window.

       --version   Print version information and exit.

ON-LINE HELP
       Type  ":help" in Vim to get started.  Type ":help subject" to get help
       on a specific subject.  For example: ":help ZZ" to get  help  for  the
       "ZZ"  command.  Use <Tab> and CTRL-D to complete subjects (":help cmd‐
       line-completion").  Tags are present to jump from one place to another
       (sort  of  hypertext links, see ":help").  All documentation files can
       be viewed in this way, for example ":help syntax.txt".

FILES
       /usr/share/vim/vim74/doc/*.txt
                      The Vim documentation files.  Use ":help doc-file-list"
                      to get the complete list.

       /usr/share/vim/vim74/doc/tags
                      The tags file used for finding information in the docu‐
                      mentation files.

       /usr/share/vim/vim74/syntax/syntax.vim
                      System wide syntax initializations.

       /usr/share/vim/vim74/syntax/*.vim
                      Syntax files for various languages.

       /etc/vimrc     System wide Vim initializations.

       ~/.vimrc       Your personal Vim initializations.

       /etc/gvimrc    System wide gvim initializations.

       ~/.gvimrc      Your personal gvim initializations.

       /usr/share/vim/vim74/optwin.vim
                      Script used for the ":options" command, a nice  way  to
                      view and set options.

       /usr/share/vim/vim74/menu.vim
                      System wide menu initializations for gvim.

       /usr/share/vim/vim74/bugreport.vim
                      Script to generate a bug report.  See ":help bugs".

       /usr/share/vim/vim74/filetype.vim
                      Script  to  detect the type of a file by its name.  See
                      ":help 'filetype'".

       /usr/share/vim/vim74/scripts.vim
                      Script to detect the type of a file  by  its  contents.
                      See ":help 'filetype'".

       /usr/share/vim/vim74/print/*.ps
                      Files used for PostScript printing.

       For recent info read the VIM home page:
       <URL:http://www.vim.org/>

SEE ALSO
       vimtutor(1)

AUTHOR
       Most  of  Vim was made by Bram Moolenaar, with a lot of help from oth‐
       ers.  See ":help credits" in Vim.
       Vim is based on Stevie, worked on by: Tim Thompson, Tony  Andrews  and
       G.R. (Fred) Walter.  Although hardly any of the original code remains.

BUGS
       Probably.  See ":help todo" for a list of known problems.

       Note that a number of things that may be regarded as bugs by some, are
       in fact caused by a too-faithful reproduction of Vi's behaviour.   And
       if  you  think other things are bugs "because Vi does it differently",
       you should take a closer look at the vi_diff.txt file (or  type  :help
       vi_diff.txt  when  in  Vim).  Also have a look at the 'compatible' and
       'cpoptions' options.



                                 2006 Apr 11                           VIM(1)
WC(1)                           User Commands                           WC(1)



NAME
       wc - print newline, word, and byte counts for each file

SYNOPSIS
       wc [OPTION]... [FILE]...
       wc [OPTION]... --files0-from=F

DESCRIPTION
       Print  newline,  word, and byte counts for each FILE, and a total line
       if more than one FILE is specified.  With no FILE, or when FILE is  -,
       read  standard input.  A word is a non-zero-length sequence of charac‐
       ters delimited by white space.  The  options  below  may  be  used  to
       select  which  counts are printed, always in the following order: new‐
       line, word, character, byte, maximum line length.

       -c, --bytes
              print the byte counts

       -m, --chars
              print the character counts

       -l, --lines
              print the newline counts

       --files0-from=F
              read input from the files specified by NUL-terminated names  in
              file F; If F is - then read names from standard input

       -L, --max-line-length
              print the length of the longest line

       -w, --words
              print the word counts

       --help display this help and exit

       --version
              output version information and exit

       GNU  coreutils  online  help: <http://www.gnu.org/software/coreutils/>
       Report wc translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Paul Rubin and David MacKenzie.

COPYRIGHT
       Copyright © 2013 Free Software Foundation, Inc.  License  GPLv3+:  GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       The full documentation for wc is maintained as a Texinfo  manual.   If
       the info and wc programs are properly installed at your site, the com‐
       mand

              info coreutils 'wc invocation'

       should give you access to the complete manual.



GNU coreutils 8.22              November 2020                           WC(1)
MV(1)                           User Commands                           MV(1)



NAME
       mv - move (rename) files

SYNOPSIS
       mv [OPTION]... [-T] SOURCE DEST
       mv [OPTION]... SOURCE... DIRECTORY
       mv [OPTION]... -t DIRECTORY SOURCE...

DESCRIPTION
       Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.

       Mandatory  arguments  to  long options are mandatory for short options
       too.

       --backup[=CONTROL]
              make a backup of each existing destination file

       -b     like --backup but does not accept an argument

       -f, --force
              do not prompt before overwriting

       -i, --interactive
              prompt before overwrite

       -n, --no-clobber
              do not overwrite an existing file

       If you specify more than one of -i, -f, -n, only the final  one  takes
       effect.

       --strip-trailing-slashes
              remove any trailing slashes from each SOURCE argument

       -S, --suffix=SUFFIX
              override the usual backup suffix

       -t, --target-directory=DIRECTORY
              move all SOURCE arguments into DIRECTORY

       -T, --no-target-directory
              treat DEST as a normal file

       -u, --update
              move  only  when  the SOURCE file is newer than the destination
              file or when the destination file is missing

       -v, --verbose
              explain what is being done

       -Z, --context
              set SELinux security context of  destination  file  to  default
              type

       --help display this help and exit

       --version
              output version information and exit

       The   backup   suffix  is  '~',  unless  set  with  --suffix  or  SIM‐
       PLE_BACKUP_SUFFIX.  The version control method may be selected via the
       --backup  option  or through the VERSION_CONTROL environment variable.
       Here are the values:

       none, off
              never make backups (even if --backup is given)

       numbered, t
              make numbered backups

       existing, nil
              numbered if numbered backups exist, simple otherwise

       simple, never
              always make simple backups

       GNU coreutils  online  help:  <http://www.gnu.org/software/coreutils/>
       Report mv translation bugs to <http://translationproject.org/team/>

AUTHOR
       Written by Mike Parker, David MacKenzie, and Jim Meyering.

COPYRIGHT
       Copyright  ©  2013 Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
       This is free software: you are free to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       rename(2)

       The  full  documentation for mv is maintained as a Texinfo manual.  If
       the info and mv programs are properly installed at your site, the com‐
       mand

              info coreutils 'mv invocation'

       should give you access to the complete manual.



GNU coreutils 8.22              November 2020                           MV(1)
